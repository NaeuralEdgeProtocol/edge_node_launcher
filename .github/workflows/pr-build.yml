name: Multi-step multi-platform build on PR to main branch and saves the artifacts

on:
  pull_request:
    branches: ["main"]

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check-version.outputs.should-run }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetches all history for all branches and tags

      # Step to fetch the latest release version
      - name: Get latest release version
        id: latest-version
        run: |
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Latest tag is $LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      # Step to read version.py and compare
      - name: Check version in ver.py
        id: check-version
        run: |
          CURRENT_VERSION=$(cat ver.py | grep -o "'.*'")
          echo "Current version is $CURRENT_VERSION"

          if [ "$CURRENT_VERSION" == "$LATEST_TAG" ]; then
            echo "Version $CURRENT_VERSION has not been incremented vs already released $LATEST_TAG. Build will be cancelled."
            echo "::set-output name=should-run::false"
            exit 1
          else
            echo "Current version $CURRENT_VERSION differs from latest tag $LATEST_TAG. Build will continue."
            echo "::set-output name=should-run::true"
          fi

  build:
    needs: check-version
    if: needs.check-version.outputs.should-run == 'true'

    strategy:
      matrix:
        include:
          - os: windows-latest
            build: ./build_scripts/win32_build.bat
            zip: Compress-Archive -Path dist/* -Destination EdgeNodeLauncher-WIN32.zip
            name: EdgeNodeLauncher-WIN32
            platformDependencies: ""

          - os: ubuntu-24.04
            build: |
              chmod +x build_scripts/unix_build.sh
              ./build_scripts/unix_build.sh
            zip: zip -r EdgeNodeLauncher-LINUX_Ubuntu-24.04.zip dist/*
            name: EdgeNodeLauncher-LINUX_Ubuntu-24.04
            platformDependencies: sudo apt-get update && sudo apt install -y '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev --fix-missing

          - os: ubuntu-22.04
            build: |
              chmod +x build_scripts/unix_build.sh
              ./build_scripts/unix_build.sh
            zip: zip -r EdgeNodeLauncher-LINUX_Ubuntu-22.04.zip dist/*
            name: EdgeNodeLauncher-LINUX_Ubuntu-22.04
            platformDependencies: sudo apt-get update && sudo apt install -y '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev --fix-missing

          - os: ubuntu-20.04
            build: |
              chmod +x build_scripts/unix_build.sh
              ./build_scripts/unix_build.sh
            zip: zip -r EdgeNodeLauncher-LINUX_Ubuntu-20.04.zip dist/*
            name: EdgeNodeLauncher-LINUX_Ubuntu-20.04
            platformDependencies: sudo apt-get update && sudo apt-get install -y '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev --fix-missing

    name: Build installers ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions: write-all

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10.11
        uses: actions/setup-python@v2
        with:
          python-version: "3.10.11"
      - run: ${{ matrix.platformDependencies }}
      - name: Setup env
        run: |
          pip install -r requirements.txt
          pip3 install --upgrade PyInstaller pyinstaller-hooks-contrib
      # Replace the `****************` to MQTT_K in utils/const.py
      - name: Replace placeholder in const.py (Windows)
        if: runner.os == 'Windows'
        env:
          MQTT_K: ${{ secrets.MQTT_K }}
        run: |
          $filePath = "utils/const.py"
          (Get-Content $filePath) -replace '\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*', "${{ env.MQTT_K }}" | Set-Content $filePath
      - name: Replace placeholder in const.py (Linux)
        if: runner.os == 'Linux'
        env:
          MQTT_K: ${{ secrets.MQTT_K }}
        run: |
          sed -i "s/\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*/${MQTT_K}/g" utils/const.py

      - name: Build app
        run: ${{ matrix.build }}

      - name: Zip App
        run: ${{ matrix.zip }}

      - name: Save zip File as artifact
        uses: actions/upload-artifact@v3
        with:
          name: release
          path: ./${{ matrix.name }}.zip